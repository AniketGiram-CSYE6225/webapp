name: Create GCP AMI CI

on:
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Packer_Validation_WorkFlow:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.createts.outputs.timestamp }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: setting up packer
        uses: hashicorp/setup-packer@main
      - name: Authentication for gcloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: setting up gcp
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: creating packer env file
        env:
          PACKER_ENVIRONMENT: ${{secrets.PACKER_ENVIRONMENT}}
        run: echo "$PACKER_ENVIRONMENT" > gcp-ami.pkrvars.hcl
      - name: creating zip file
        run: |
          rm -rf webapp.zip
          zip -r webapp.zip . -x ".git/*" ".github/*"
      - name: Run `packer init`
        run: "packer init ./gcp-ami.pkr.hcl"
      - name: Run `packer format`
        run: "packer fmt -var-file=gcp-ami.pkrvars.hcl ./gcp-ami.pkr.hcl"
      - name: Run `packer validate`
        run: "packer validate -var-file=gcp-ami.pkrvars.hcl ./gcp-ami.pkr.hcl"
      - name: Build Packer Image
        run: |
          packer build -var-file=gcp-ami.pkrvars.hcl ./gcp-ami.pkr.hcl | tee /tmp/packer-output.txt
          IMAGE_NAME=$(grep project /tmp/packer-output.txt | cut -d " " -f 12)
          echo "$IMAGE_NAME" > packer-image-name.txt
      - name: Get Secret value
        run: |
          gcloud secrets versions access latest --secret=webapp-secret --format='value(payload.data)' > webapp-secret.json
      - name: Create Instance Template
        id: createts
        run: |
          timestamp=$(date +%Y%m%d%H%M)
          JSON_DATA=$(cat webapp-secret.json)
          IMAGE_NAME=$(cat packer-image-name.txt)
          BOOT_DISK_TYPE=$(echo "$JSON_DATA" | jq -r '.boot_disk_type')
          IMAGE_PROJECT=$(echo "$JSON_DATA" | jq -r '.image_project')
          MACHINE_TYPE=$(echo "$JSON_DATA" | jq -r '.machine_type')
          MAINTENANCE_POLICY=$(echo "$JSON_DATA" | jq -r '.maintenance_policy')
          NETWORK=$(echo "$JSON_DATA" | jq -r '.network_interface.network')
          SUBNETWORK=$(echo "$JSON_DATA" | jq -r '.network_interface.subnetwork')
          REGION=$(echo "$JSON_DATA" | jq -r '.region')
          SCOPES=$(echo "$JSON_DATA" | jq -r '.scope')
          SERVICE_ACCOUNT=$(echo "$JSON_DATA" | jq -r '.service_account')
          TAG=$(echo "$JSON_DATA" | jq -r '.tag')
          KMS_KEY=$(echo "$JSON_DATA" | jq -r '.kms_key')
          METADATA_STARTUP_SCRIPT=$(echo "$JSON_DATA" | jq -r '.metadata_startup_script')
          gcloud compute instance-templates create webapp-instance-template-github-$timestamp \
            --instance-template-region="$REGION" \
            --tags="$TAG" \
            --machine-type="$MACHINE_TYPE" \
            --region="$REGION" \
            --network-interface=network="$NETWORK",subnet="$SUBNETWORK",no-address \
            --service-account="$SERVICE_ACCOUNT" \
            --scopes="$SCOPES" \
            --maintenance-policy="$MAINTENANCE_POLICY" \
            --image-project="$IMAGE_PROJECT" \
            --image="$IMAGE_NAME" \
            --boot-disk-type="$BOOT_DISK_TYPE" \
            --boot-disk-kms-key="$KMS_KEY"\
            --metadata=startup-script="$METADATA_STARTUP_SCRIPT"
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
      - name: Update Instance Group
        run : |
          timestamp=${{ steps.createts.outputs.timestamp }}
          JSON_DATA=$(cat webapp-secret.json)
          PROJECT_NAME=$(echo "$JSON_DATA" | jq -r '.image_project')
          REGION=$(echo "$JSON_DATA" | jq -r '.region')
          gcloud compute instance-groups managed rolling-action start-update "compute-instance-group-manager" \
            --version=template="projects/$PROJECT_NAME/regions/$REGION/instanceTemplates/webapp-instance-template-github-$timestamp" \
            --region="$REGION"
      - name: Wait Until Instance Group is not healthy
        run : |
          JSON_DATA=$(cat webapp-secret.json)
          REGION=$(echo "$JSON_DATA" | jq -r '.region')
          end=$((SECONDS+600)) # 10 minutes from now
          while [ $SECONDS -lt $end ]; do
            if gcloud compute instance-groups managed describe compute-instance-group-manager --region="$REGION" | grep -q "status.versionTarget.isReached"; then
              echo "Version target reached."
              break
            fi
            echo "Waiting for version target to be reached..."
            sleep 2
          done
  
